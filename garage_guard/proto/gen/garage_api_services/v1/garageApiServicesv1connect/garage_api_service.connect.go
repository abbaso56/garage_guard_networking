// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: garage_api_services/v1/garage_api_service.proto

package garageApiServicesv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "garage_guard/proto/gen/garage_api_services/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GarageEntryCheckServiceName is the fully-qualified name of the GarageEntryCheckService service.
	GarageEntryCheckServiceName = "garage_api_services.v1.GarageEntryCheckService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GarageEntryCheckServiceLicensePlateCheckProcedure is the fully-qualified name of the
	// GarageEntryCheckService's LicensePlateCheck RPC.
	GarageEntryCheckServiceLicensePlateCheckProcedure = "/garage_api_services.v1.GarageEntryCheckService/LicensePlateCheck"
	// GarageEntryCheckServiceGestureSeqCheckProcedure is the fully-qualified name of the
	// GarageEntryCheckService's GestureSeqCheck RPC.
	GarageEntryCheckServiceGestureSeqCheckProcedure = "/garage_api_services.v1.GarageEntryCheckService/GestureSeqCheck"
	// GarageEntryCheckServiceUserIdCheckProcedure is the fully-qualified name of the
	// GarageEntryCheckService's UserIdCheck RPC.
	GarageEntryCheckServiceUserIdCheckProcedure = "/garage_api_services.v1.GarageEntryCheckService/UserIdCheck"
)

// GarageEntryCheckServiceClient is a client for the garage_api_services.v1.GarageEntryCheckService
// service.
type GarageEntryCheckServiceClient interface {
	LicensePlateCheck(context.Context, *connect.Request[v1.LicensePlateCheckRequest]) (*connect.Response[v1.LicensePlateCheckResponse], error)
	GestureSeqCheck(context.Context, *connect.Request[v1.GestureSeqCheckRequest]) (*connect.Response[v1.GestureSeqCheckResponse], error)
	UserIdCheck(context.Context, *connect.Request[v1.UserIdCheckRequest]) (*connect.Response[v1.UserIdCheckResponse], error)
}

// NewGarageEntryCheckServiceClient constructs a client for the
// garage_api_services.v1.GarageEntryCheckService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGarageEntryCheckServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GarageEntryCheckServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	garageEntryCheckServiceMethods := v1.File_garage_api_services_v1_garage_api_service_proto.Services().ByName("GarageEntryCheckService").Methods()
	return &garageEntryCheckServiceClient{
		licensePlateCheck: connect.NewClient[v1.LicensePlateCheckRequest, v1.LicensePlateCheckResponse](
			httpClient,
			baseURL+GarageEntryCheckServiceLicensePlateCheckProcedure,
			connect.WithSchema(garageEntryCheckServiceMethods.ByName("LicensePlateCheck")),
			connect.WithClientOptions(opts...),
		),
		gestureSeqCheck: connect.NewClient[v1.GestureSeqCheckRequest, v1.GestureSeqCheckResponse](
			httpClient,
			baseURL+GarageEntryCheckServiceGestureSeqCheckProcedure,
			connect.WithSchema(garageEntryCheckServiceMethods.ByName("GestureSeqCheck")),
			connect.WithClientOptions(opts...),
		),
		userIdCheck: connect.NewClient[v1.UserIdCheckRequest, v1.UserIdCheckResponse](
			httpClient,
			baseURL+GarageEntryCheckServiceUserIdCheckProcedure,
			connect.WithSchema(garageEntryCheckServiceMethods.ByName("UserIdCheck")),
			connect.WithClientOptions(opts...),
		),
	}
}

// garageEntryCheckServiceClient implements GarageEntryCheckServiceClient.
type garageEntryCheckServiceClient struct {
	licensePlateCheck *connect.Client[v1.LicensePlateCheckRequest, v1.LicensePlateCheckResponse]
	gestureSeqCheck   *connect.Client[v1.GestureSeqCheckRequest, v1.GestureSeqCheckResponse]
	userIdCheck       *connect.Client[v1.UserIdCheckRequest, v1.UserIdCheckResponse]
}

// LicensePlateCheck calls garage_api_services.v1.GarageEntryCheckService.LicensePlateCheck.
func (c *garageEntryCheckServiceClient) LicensePlateCheck(ctx context.Context, req *connect.Request[v1.LicensePlateCheckRequest]) (*connect.Response[v1.LicensePlateCheckResponse], error) {
	return c.licensePlateCheck.CallUnary(ctx, req)
}

// GestureSeqCheck calls garage_api_services.v1.GarageEntryCheckService.GestureSeqCheck.
func (c *garageEntryCheckServiceClient) GestureSeqCheck(ctx context.Context, req *connect.Request[v1.GestureSeqCheckRequest]) (*connect.Response[v1.GestureSeqCheckResponse], error) {
	return c.gestureSeqCheck.CallUnary(ctx, req)
}

// UserIdCheck calls garage_api_services.v1.GarageEntryCheckService.UserIdCheck.
func (c *garageEntryCheckServiceClient) UserIdCheck(ctx context.Context, req *connect.Request[v1.UserIdCheckRequest]) (*connect.Response[v1.UserIdCheckResponse], error) {
	return c.userIdCheck.CallUnary(ctx, req)
}

// GarageEntryCheckServiceHandler is an implementation of the
// garage_api_services.v1.GarageEntryCheckService service.
type GarageEntryCheckServiceHandler interface {
	LicensePlateCheck(context.Context, *connect.Request[v1.LicensePlateCheckRequest]) (*connect.Response[v1.LicensePlateCheckResponse], error)
	GestureSeqCheck(context.Context, *connect.Request[v1.GestureSeqCheckRequest]) (*connect.Response[v1.GestureSeqCheckResponse], error)
	UserIdCheck(context.Context, *connect.Request[v1.UserIdCheckRequest]) (*connect.Response[v1.UserIdCheckResponse], error)
}

// NewGarageEntryCheckServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGarageEntryCheckServiceHandler(svc GarageEntryCheckServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	garageEntryCheckServiceMethods := v1.File_garage_api_services_v1_garage_api_service_proto.Services().ByName("GarageEntryCheckService").Methods()
	garageEntryCheckServiceLicensePlateCheckHandler := connect.NewUnaryHandler(
		GarageEntryCheckServiceLicensePlateCheckProcedure,
		svc.LicensePlateCheck,
		connect.WithSchema(garageEntryCheckServiceMethods.ByName("LicensePlateCheck")),
		connect.WithHandlerOptions(opts...),
	)
	garageEntryCheckServiceGestureSeqCheckHandler := connect.NewUnaryHandler(
		GarageEntryCheckServiceGestureSeqCheckProcedure,
		svc.GestureSeqCheck,
		connect.WithSchema(garageEntryCheckServiceMethods.ByName("GestureSeqCheck")),
		connect.WithHandlerOptions(opts...),
	)
	garageEntryCheckServiceUserIdCheckHandler := connect.NewUnaryHandler(
		GarageEntryCheckServiceUserIdCheckProcedure,
		svc.UserIdCheck,
		connect.WithSchema(garageEntryCheckServiceMethods.ByName("UserIdCheck")),
		connect.WithHandlerOptions(opts...),
	)
	return "/garage_api_services.v1.GarageEntryCheckService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GarageEntryCheckServiceLicensePlateCheckProcedure:
			garageEntryCheckServiceLicensePlateCheckHandler.ServeHTTP(w, r)
		case GarageEntryCheckServiceGestureSeqCheckProcedure:
			garageEntryCheckServiceGestureSeqCheckHandler.ServeHTTP(w, r)
		case GarageEntryCheckServiceUserIdCheckProcedure:
			garageEntryCheckServiceUserIdCheckHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGarageEntryCheckServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGarageEntryCheckServiceHandler struct{}

func (UnimplementedGarageEntryCheckServiceHandler) LicensePlateCheck(context.Context, *connect.Request[v1.LicensePlateCheckRequest]) (*connect.Response[v1.LicensePlateCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("garage_api_services.v1.GarageEntryCheckService.LicensePlateCheck is not implemented"))
}

func (UnimplementedGarageEntryCheckServiceHandler) GestureSeqCheck(context.Context, *connect.Request[v1.GestureSeqCheckRequest]) (*connect.Response[v1.GestureSeqCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("garage_api_services.v1.GarageEntryCheckService.GestureSeqCheck is not implemented"))
}

func (UnimplementedGarageEntryCheckServiceHandler) UserIdCheck(context.Context, *connect.Request[v1.UserIdCheckRequest]) (*connect.Response[v1.UserIdCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("garage_api_services.v1.GarageEntryCheckService.UserIdCheck is not implemented"))
}
