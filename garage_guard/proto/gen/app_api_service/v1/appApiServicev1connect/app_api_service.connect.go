// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: app_api_service/v1/app_api_service.proto

package appApiServicev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "garage_guard/proto/gen/app_api_service/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AppApiServiceName is the fully-qualified name of the AppApiService service.
	AppApiServiceName = "app_api_service.v1.AppApiService"
	// AuthedAppApiServiceName is the fully-qualified name of the AuthedAppApiService service.
	AuthedAppApiServiceName = "app_api_service.v1.AuthedAppApiService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AppApiServiceConnectionCheckProcedure is the fully-qualified name of the AppApiService's
	// ConnectionCheck RPC.
	AppApiServiceConnectionCheckProcedure = "/app_api_service.v1.AppApiService/ConnectionCheck"
	// AppApiServiceRegisterUserProcedure is the fully-qualified name of the AppApiService's
	// RegisterUser RPC.
	AppApiServiceRegisterUserProcedure = "/app_api_service.v1.AppApiService/RegisterUser"
	// AppApiServiceSignInProcedure is the fully-qualified name of the AppApiService's SignIn RPC.
	AppApiServiceSignInProcedure = "/app_api_service.v1.AppApiService/SignIn"
	// AuthedAppApiServiceNewGarageProcedure is the fully-qualified name of the AuthedAppApiService's
	// NewGarage RPC.
	AuthedAppApiServiceNewGarageProcedure = "/app_api_service.v1.AuthedAppApiService/NewGarage"
	// AuthedAppApiServiceGetGaragesProcedure is the fully-qualified name of the AuthedAppApiService's
	// GetGarages RPC.
	AuthedAppApiServiceGetGaragesProcedure = "/app_api_service.v1.AuthedAppApiService/GetGarages"
	// AuthedAppApiServiceGetGarageByGarageIdProcedure is the fully-qualified name of the
	// AuthedAppApiService's GetGarageByGarageId RPC.
	AuthedAppApiServiceGetGarageByGarageIdProcedure = "/app_api_service.v1.AuthedAppApiService/GetGarageByGarageId"
	// AuthedAppApiServiceAddNewCarProcedure is the fully-qualified name of the AuthedAppApiService's
	// AddNewCar RPC.
	AuthedAppApiServiceAddNewCarProcedure = "/app_api_service.v1.AuthedAppApiService/AddNewCar"
	// AuthedAppApiServiceUpdateGestureSeqProcedure is the fully-qualified name of the
	// AuthedAppApiService's UpdateGestureSeq RPC.
	AuthedAppApiServiceUpdateGestureSeqProcedure = "/app_api_service.v1.AuthedAppApiService/UpdateGestureSeq"
	// AuthedAppApiServiceGetCarsInGarageProcedure is the fully-qualified name of the
	// AuthedAppApiService's GetCarsInGarage RPC.
	AuthedAppApiServiceGetCarsInGarageProcedure = "/app_api_service.v1.AuthedAppApiService/GetCarsInGarage"
	// AuthedAppApiServiceAddDeviceIdProcedure is the fully-qualified name of the AuthedAppApiService's
	// AddDeviceId RPC.
	AuthedAppApiServiceAddDeviceIdProcedure = "/app_api_service.v1.AuthedAppApiService/AddDeviceId"
	// AuthedAppApiServiceAddGarageIdProcedure is the fully-qualified name of the AuthedAppApiService's
	// AddGarageId RPC.
	AuthedAppApiServiceAddGarageIdProcedure = "/app_api_service.v1.AuthedAppApiService/AddGarageId"
)

// AppApiServiceClient is a client for the app_api_service.v1.AppApiService service.
type AppApiServiceClient interface {
	// check connection
	ConnectionCheck(context.Context, *connect.Request[v1.ConnectionCheckRequest]) (*connect.Response[v1.ConnectionCheckResponse], error)
	// Creates a new user
	RegisterUser(context.Context, *connect.Request[v1.RegisterUserRequest]) (*connect.Response[v1.RegisterUserResponse], error)
	// Signs in given the required credintials
	SignIn(context.Context, *connect.Request[v1.SignInRequest]) (*connect.Response[v1.SignInResponse], error)
}

// NewAppApiServiceClient constructs a client for the app_api_service.v1.AppApiService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAppApiServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AppApiServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	appApiServiceMethods := v1.File_app_api_service_v1_app_api_service_proto.Services().ByName("AppApiService").Methods()
	return &appApiServiceClient{
		connectionCheck: connect.NewClient[v1.ConnectionCheckRequest, v1.ConnectionCheckResponse](
			httpClient,
			baseURL+AppApiServiceConnectionCheckProcedure,
			connect.WithSchema(appApiServiceMethods.ByName("ConnectionCheck")),
			connect.WithClientOptions(opts...),
		),
		registerUser: connect.NewClient[v1.RegisterUserRequest, v1.RegisterUserResponse](
			httpClient,
			baseURL+AppApiServiceRegisterUserProcedure,
			connect.WithSchema(appApiServiceMethods.ByName("RegisterUser")),
			connect.WithClientOptions(opts...),
		),
		signIn: connect.NewClient[v1.SignInRequest, v1.SignInResponse](
			httpClient,
			baseURL+AppApiServiceSignInProcedure,
			connect.WithSchema(appApiServiceMethods.ByName("SignIn")),
			connect.WithClientOptions(opts...),
		),
	}
}

// appApiServiceClient implements AppApiServiceClient.
type appApiServiceClient struct {
	connectionCheck *connect.Client[v1.ConnectionCheckRequest, v1.ConnectionCheckResponse]
	registerUser    *connect.Client[v1.RegisterUserRequest, v1.RegisterUserResponse]
	signIn          *connect.Client[v1.SignInRequest, v1.SignInResponse]
}

// ConnectionCheck calls app_api_service.v1.AppApiService.ConnectionCheck.
func (c *appApiServiceClient) ConnectionCheck(ctx context.Context, req *connect.Request[v1.ConnectionCheckRequest]) (*connect.Response[v1.ConnectionCheckResponse], error) {
	return c.connectionCheck.CallUnary(ctx, req)
}

// RegisterUser calls app_api_service.v1.AppApiService.RegisterUser.
func (c *appApiServiceClient) RegisterUser(ctx context.Context, req *connect.Request[v1.RegisterUserRequest]) (*connect.Response[v1.RegisterUserResponse], error) {
	return c.registerUser.CallUnary(ctx, req)
}

// SignIn calls app_api_service.v1.AppApiService.SignIn.
func (c *appApiServiceClient) SignIn(ctx context.Context, req *connect.Request[v1.SignInRequest]) (*connect.Response[v1.SignInResponse], error) {
	return c.signIn.CallUnary(ctx, req)
}

// AppApiServiceHandler is an implementation of the app_api_service.v1.AppApiService service.
type AppApiServiceHandler interface {
	// check connection
	ConnectionCheck(context.Context, *connect.Request[v1.ConnectionCheckRequest]) (*connect.Response[v1.ConnectionCheckResponse], error)
	// Creates a new user
	RegisterUser(context.Context, *connect.Request[v1.RegisterUserRequest]) (*connect.Response[v1.RegisterUserResponse], error)
	// Signs in given the required credintials
	SignIn(context.Context, *connect.Request[v1.SignInRequest]) (*connect.Response[v1.SignInResponse], error)
}

// NewAppApiServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAppApiServiceHandler(svc AppApiServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	appApiServiceMethods := v1.File_app_api_service_v1_app_api_service_proto.Services().ByName("AppApiService").Methods()
	appApiServiceConnectionCheckHandler := connect.NewUnaryHandler(
		AppApiServiceConnectionCheckProcedure,
		svc.ConnectionCheck,
		connect.WithSchema(appApiServiceMethods.ByName("ConnectionCheck")),
		connect.WithHandlerOptions(opts...),
	)
	appApiServiceRegisterUserHandler := connect.NewUnaryHandler(
		AppApiServiceRegisterUserProcedure,
		svc.RegisterUser,
		connect.WithSchema(appApiServiceMethods.ByName("RegisterUser")),
		connect.WithHandlerOptions(opts...),
	)
	appApiServiceSignInHandler := connect.NewUnaryHandler(
		AppApiServiceSignInProcedure,
		svc.SignIn,
		connect.WithSchema(appApiServiceMethods.ByName("SignIn")),
		connect.WithHandlerOptions(opts...),
	)
	return "/app_api_service.v1.AppApiService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AppApiServiceConnectionCheckProcedure:
			appApiServiceConnectionCheckHandler.ServeHTTP(w, r)
		case AppApiServiceRegisterUserProcedure:
			appApiServiceRegisterUserHandler.ServeHTTP(w, r)
		case AppApiServiceSignInProcedure:
			appApiServiceSignInHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAppApiServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAppApiServiceHandler struct{}

func (UnimplementedAppApiServiceHandler) ConnectionCheck(context.Context, *connect.Request[v1.ConnectionCheckRequest]) (*connect.Response[v1.ConnectionCheckResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app_api_service.v1.AppApiService.ConnectionCheck is not implemented"))
}

func (UnimplementedAppApiServiceHandler) RegisterUser(context.Context, *connect.Request[v1.RegisterUserRequest]) (*connect.Response[v1.RegisterUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app_api_service.v1.AppApiService.RegisterUser is not implemented"))
}

func (UnimplementedAppApiServiceHandler) SignIn(context.Context, *connect.Request[v1.SignInRequest]) (*connect.Response[v1.SignInResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app_api_service.v1.AppApiService.SignIn is not implemented"))
}

// AuthedAppApiServiceClient is a client for the app_api_service.v1.AuthedAppApiService service.
type AuthedAppApiServiceClient interface {
	// Adds a new garage where the user can register a device and cars
	// The user that created the garage is registered as the admin
	NewGarage(context.Context, *connect.Request[v1.NewGarageRequest]) (*connect.Response[v1.NewGarageResponse], error)
	// Gets the Garages that are registered to the user
	GetGarages(context.Context, *connect.Request[v1.GetGaragesRequest]) (*connect.Response[v1.GetGaragesResponse], error)
	// Gets a garage through its own id
	GetGarageByGarageId(context.Context, *connect.Request[v1.GetGarageByGarageIdRequest]) (*connect.Response[v1.GetGarageByGarageIdResponse], error)
	// Adds as new car to a garage
	AddNewCar(context.Context, *connect.Request[v1.AddNewCarRequest]) (*connect.Response[v1.AddNewCarResponse], error)
	// Update gesture sequence for garage
	UpdateGestureSeq(context.Context, *connect.Request[v1.UpdateGestureSeqRequest]) (*connect.Response[v1.UpdateGestureSeqResponse], error)
	// Get cars registered to a garage
	GetCarsInGarage(context.Context, *connect.Request[v1.GetCarsInGarageRequest]) (*connect.Response[v1.GetCarsInGarageResponse], error)
	// Adds device id
	AddDeviceId(context.Context, *connect.Request[v1.AddDeviceIdRequest]) (*connect.Response[v1.AddDeviceIdResponse], error)
	// Add garage id
	AddGarageId(context.Context, *connect.Request[v1.AddGarageIdRequest]) (*connect.Response[v1.AddGarageIdResponse], error)
}

// NewAuthedAppApiServiceClient constructs a client for the app_api_service.v1.AuthedAppApiService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthedAppApiServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthedAppApiServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	authedAppApiServiceMethods := v1.File_app_api_service_v1_app_api_service_proto.Services().ByName("AuthedAppApiService").Methods()
	return &authedAppApiServiceClient{
		newGarage: connect.NewClient[v1.NewGarageRequest, v1.NewGarageResponse](
			httpClient,
			baseURL+AuthedAppApiServiceNewGarageProcedure,
			connect.WithSchema(authedAppApiServiceMethods.ByName("NewGarage")),
			connect.WithClientOptions(opts...),
		),
		getGarages: connect.NewClient[v1.GetGaragesRequest, v1.GetGaragesResponse](
			httpClient,
			baseURL+AuthedAppApiServiceGetGaragesProcedure,
			connect.WithSchema(authedAppApiServiceMethods.ByName("GetGarages")),
			connect.WithClientOptions(opts...),
		),
		getGarageByGarageId: connect.NewClient[v1.GetGarageByGarageIdRequest, v1.GetGarageByGarageIdResponse](
			httpClient,
			baseURL+AuthedAppApiServiceGetGarageByGarageIdProcedure,
			connect.WithSchema(authedAppApiServiceMethods.ByName("GetGarageByGarageId")),
			connect.WithClientOptions(opts...),
		),
		addNewCar: connect.NewClient[v1.AddNewCarRequest, v1.AddNewCarResponse](
			httpClient,
			baseURL+AuthedAppApiServiceAddNewCarProcedure,
			connect.WithSchema(authedAppApiServiceMethods.ByName("AddNewCar")),
			connect.WithClientOptions(opts...),
		),
		updateGestureSeq: connect.NewClient[v1.UpdateGestureSeqRequest, v1.UpdateGestureSeqResponse](
			httpClient,
			baseURL+AuthedAppApiServiceUpdateGestureSeqProcedure,
			connect.WithSchema(authedAppApiServiceMethods.ByName("UpdateGestureSeq")),
			connect.WithClientOptions(opts...),
		),
		getCarsInGarage: connect.NewClient[v1.GetCarsInGarageRequest, v1.GetCarsInGarageResponse](
			httpClient,
			baseURL+AuthedAppApiServiceGetCarsInGarageProcedure,
			connect.WithSchema(authedAppApiServiceMethods.ByName("GetCarsInGarage")),
			connect.WithClientOptions(opts...),
		),
		addDeviceId: connect.NewClient[v1.AddDeviceIdRequest, v1.AddDeviceIdResponse](
			httpClient,
			baseURL+AuthedAppApiServiceAddDeviceIdProcedure,
			connect.WithSchema(authedAppApiServiceMethods.ByName("AddDeviceId")),
			connect.WithClientOptions(opts...),
		),
		addGarageId: connect.NewClient[v1.AddGarageIdRequest, v1.AddGarageIdResponse](
			httpClient,
			baseURL+AuthedAppApiServiceAddGarageIdProcedure,
			connect.WithSchema(authedAppApiServiceMethods.ByName("AddGarageId")),
			connect.WithClientOptions(opts...),
		),
	}
}

// authedAppApiServiceClient implements AuthedAppApiServiceClient.
type authedAppApiServiceClient struct {
	newGarage           *connect.Client[v1.NewGarageRequest, v1.NewGarageResponse]
	getGarages          *connect.Client[v1.GetGaragesRequest, v1.GetGaragesResponse]
	getGarageByGarageId *connect.Client[v1.GetGarageByGarageIdRequest, v1.GetGarageByGarageIdResponse]
	addNewCar           *connect.Client[v1.AddNewCarRequest, v1.AddNewCarResponse]
	updateGestureSeq    *connect.Client[v1.UpdateGestureSeqRequest, v1.UpdateGestureSeqResponse]
	getCarsInGarage     *connect.Client[v1.GetCarsInGarageRequest, v1.GetCarsInGarageResponse]
	addDeviceId         *connect.Client[v1.AddDeviceIdRequest, v1.AddDeviceIdResponse]
	addGarageId         *connect.Client[v1.AddGarageIdRequest, v1.AddGarageIdResponse]
}

// NewGarage calls app_api_service.v1.AuthedAppApiService.NewGarage.
func (c *authedAppApiServiceClient) NewGarage(ctx context.Context, req *connect.Request[v1.NewGarageRequest]) (*connect.Response[v1.NewGarageResponse], error) {
	return c.newGarage.CallUnary(ctx, req)
}

// GetGarages calls app_api_service.v1.AuthedAppApiService.GetGarages.
func (c *authedAppApiServiceClient) GetGarages(ctx context.Context, req *connect.Request[v1.GetGaragesRequest]) (*connect.Response[v1.GetGaragesResponse], error) {
	return c.getGarages.CallUnary(ctx, req)
}

// GetGarageByGarageId calls app_api_service.v1.AuthedAppApiService.GetGarageByGarageId.
func (c *authedAppApiServiceClient) GetGarageByGarageId(ctx context.Context, req *connect.Request[v1.GetGarageByGarageIdRequest]) (*connect.Response[v1.GetGarageByGarageIdResponse], error) {
	return c.getGarageByGarageId.CallUnary(ctx, req)
}

// AddNewCar calls app_api_service.v1.AuthedAppApiService.AddNewCar.
func (c *authedAppApiServiceClient) AddNewCar(ctx context.Context, req *connect.Request[v1.AddNewCarRequest]) (*connect.Response[v1.AddNewCarResponse], error) {
	return c.addNewCar.CallUnary(ctx, req)
}

// UpdateGestureSeq calls app_api_service.v1.AuthedAppApiService.UpdateGestureSeq.
func (c *authedAppApiServiceClient) UpdateGestureSeq(ctx context.Context, req *connect.Request[v1.UpdateGestureSeqRequest]) (*connect.Response[v1.UpdateGestureSeqResponse], error) {
	return c.updateGestureSeq.CallUnary(ctx, req)
}

// GetCarsInGarage calls app_api_service.v1.AuthedAppApiService.GetCarsInGarage.
func (c *authedAppApiServiceClient) GetCarsInGarage(ctx context.Context, req *connect.Request[v1.GetCarsInGarageRequest]) (*connect.Response[v1.GetCarsInGarageResponse], error) {
	return c.getCarsInGarage.CallUnary(ctx, req)
}

// AddDeviceId calls app_api_service.v1.AuthedAppApiService.AddDeviceId.
func (c *authedAppApiServiceClient) AddDeviceId(ctx context.Context, req *connect.Request[v1.AddDeviceIdRequest]) (*connect.Response[v1.AddDeviceIdResponse], error) {
	return c.addDeviceId.CallUnary(ctx, req)
}

// AddGarageId calls app_api_service.v1.AuthedAppApiService.AddGarageId.
func (c *authedAppApiServiceClient) AddGarageId(ctx context.Context, req *connect.Request[v1.AddGarageIdRequest]) (*connect.Response[v1.AddGarageIdResponse], error) {
	return c.addGarageId.CallUnary(ctx, req)
}

// AuthedAppApiServiceHandler is an implementation of the app_api_service.v1.AuthedAppApiService
// service.
type AuthedAppApiServiceHandler interface {
	// Adds a new garage where the user can register a device and cars
	// The user that created the garage is registered as the admin
	NewGarage(context.Context, *connect.Request[v1.NewGarageRequest]) (*connect.Response[v1.NewGarageResponse], error)
	// Gets the Garages that are registered to the user
	GetGarages(context.Context, *connect.Request[v1.GetGaragesRequest]) (*connect.Response[v1.GetGaragesResponse], error)
	// Gets a garage through its own id
	GetGarageByGarageId(context.Context, *connect.Request[v1.GetGarageByGarageIdRequest]) (*connect.Response[v1.GetGarageByGarageIdResponse], error)
	// Adds as new car to a garage
	AddNewCar(context.Context, *connect.Request[v1.AddNewCarRequest]) (*connect.Response[v1.AddNewCarResponse], error)
	// Update gesture sequence for garage
	UpdateGestureSeq(context.Context, *connect.Request[v1.UpdateGestureSeqRequest]) (*connect.Response[v1.UpdateGestureSeqResponse], error)
	// Get cars registered to a garage
	GetCarsInGarage(context.Context, *connect.Request[v1.GetCarsInGarageRequest]) (*connect.Response[v1.GetCarsInGarageResponse], error)
	// Adds device id
	AddDeviceId(context.Context, *connect.Request[v1.AddDeviceIdRequest]) (*connect.Response[v1.AddDeviceIdResponse], error)
	// Add garage id
	AddGarageId(context.Context, *connect.Request[v1.AddGarageIdRequest]) (*connect.Response[v1.AddGarageIdResponse], error)
}

// NewAuthedAppApiServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthedAppApiServiceHandler(svc AuthedAppApiServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authedAppApiServiceMethods := v1.File_app_api_service_v1_app_api_service_proto.Services().ByName("AuthedAppApiService").Methods()
	authedAppApiServiceNewGarageHandler := connect.NewUnaryHandler(
		AuthedAppApiServiceNewGarageProcedure,
		svc.NewGarage,
		connect.WithSchema(authedAppApiServiceMethods.ByName("NewGarage")),
		connect.WithHandlerOptions(opts...),
	)
	authedAppApiServiceGetGaragesHandler := connect.NewUnaryHandler(
		AuthedAppApiServiceGetGaragesProcedure,
		svc.GetGarages,
		connect.WithSchema(authedAppApiServiceMethods.ByName("GetGarages")),
		connect.WithHandlerOptions(opts...),
	)
	authedAppApiServiceGetGarageByGarageIdHandler := connect.NewUnaryHandler(
		AuthedAppApiServiceGetGarageByGarageIdProcedure,
		svc.GetGarageByGarageId,
		connect.WithSchema(authedAppApiServiceMethods.ByName("GetGarageByGarageId")),
		connect.WithHandlerOptions(opts...),
	)
	authedAppApiServiceAddNewCarHandler := connect.NewUnaryHandler(
		AuthedAppApiServiceAddNewCarProcedure,
		svc.AddNewCar,
		connect.WithSchema(authedAppApiServiceMethods.ByName("AddNewCar")),
		connect.WithHandlerOptions(opts...),
	)
	authedAppApiServiceUpdateGestureSeqHandler := connect.NewUnaryHandler(
		AuthedAppApiServiceUpdateGestureSeqProcedure,
		svc.UpdateGestureSeq,
		connect.WithSchema(authedAppApiServiceMethods.ByName("UpdateGestureSeq")),
		connect.WithHandlerOptions(opts...),
	)
	authedAppApiServiceGetCarsInGarageHandler := connect.NewUnaryHandler(
		AuthedAppApiServiceGetCarsInGarageProcedure,
		svc.GetCarsInGarage,
		connect.WithSchema(authedAppApiServiceMethods.ByName("GetCarsInGarage")),
		connect.WithHandlerOptions(opts...),
	)
	authedAppApiServiceAddDeviceIdHandler := connect.NewUnaryHandler(
		AuthedAppApiServiceAddDeviceIdProcedure,
		svc.AddDeviceId,
		connect.WithSchema(authedAppApiServiceMethods.ByName("AddDeviceId")),
		connect.WithHandlerOptions(opts...),
	)
	authedAppApiServiceAddGarageIdHandler := connect.NewUnaryHandler(
		AuthedAppApiServiceAddGarageIdProcedure,
		svc.AddGarageId,
		connect.WithSchema(authedAppApiServiceMethods.ByName("AddGarageId")),
		connect.WithHandlerOptions(opts...),
	)
	return "/app_api_service.v1.AuthedAppApiService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthedAppApiServiceNewGarageProcedure:
			authedAppApiServiceNewGarageHandler.ServeHTTP(w, r)
		case AuthedAppApiServiceGetGaragesProcedure:
			authedAppApiServiceGetGaragesHandler.ServeHTTP(w, r)
		case AuthedAppApiServiceGetGarageByGarageIdProcedure:
			authedAppApiServiceGetGarageByGarageIdHandler.ServeHTTP(w, r)
		case AuthedAppApiServiceAddNewCarProcedure:
			authedAppApiServiceAddNewCarHandler.ServeHTTP(w, r)
		case AuthedAppApiServiceUpdateGestureSeqProcedure:
			authedAppApiServiceUpdateGestureSeqHandler.ServeHTTP(w, r)
		case AuthedAppApiServiceGetCarsInGarageProcedure:
			authedAppApiServiceGetCarsInGarageHandler.ServeHTTP(w, r)
		case AuthedAppApiServiceAddDeviceIdProcedure:
			authedAppApiServiceAddDeviceIdHandler.ServeHTTP(w, r)
		case AuthedAppApiServiceAddGarageIdProcedure:
			authedAppApiServiceAddGarageIdHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthedAppApiServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthedAppApiServiceHandler struct{}

func (UnimplementedAuthedAppApiServiceHandler) NewGarage(context.Context, *connect.Request[v1.NewGarageRequest]) (*connect.Response[v1.NewGarageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app_api_service.v1.AuthedAppApiService.NewGarage is not implemented"))
}

func (UnimplementedAuthedAppApiServiceHandler) GetGarages(context.Context, *connect.Request[v1.GetGaragesRequest]) (*connect.Response[v1.GetGaragesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app_api_service.v1.AuthedAppApiService.GetGarages is not implemented"))
}

func (UnimplementedAuthedAppApiServiceHandler) GetGarageByGarageId(context.Context, *connect.Request[v1.GetGarageByGarageIdRequest]) (*connect.Response[v1.GetGarageByGarageIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app_api_service.v1.AuthedAppApiService.GetGarageByGarageId is not implemented"))
}

func (UnimplementedAuthedAppApiServiceHandler) AddNewCar(context.Context, *connect.Request[v1.AddNewCarRequest]) (*connect.Response[v1.AddNewCarResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app_api_service.v1.AuthedAppApiService.AddNewCar is not implemented"))
}

func (UnimplementedAuthedAppApiServiceHandler) UpdateGestureSeq(context.Context, *connect.Request[v1.UpdateGestureSeqRequest]) (*connect.Response[v1.UpdateGestureSeqResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app_api_service.v1.AuthedAppApiService.UpdateGestureSeq is not implemented"))
}

func (UnimplementedAuthedAppApiServiceHandler) GetCarsInGarage(context.Context, *connect.Request[v1.GetCarsInGarageRequest]) (*connect.Response[v1.GetCarsInGarageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app_api_service.v1.AuthedAppApiService.GetCarsInGarage is not implemented"))
}

func (UnimplementedAuthedAppApiServiceHandler) AddDeviceId(context.Context, *connect.Request[v1.AddDeviceIdRequest]) (*connect.Response[v1.AddDeviceIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app_api_service.v1.AuthedAppApiService.AddDeviceId is not implemented"))
}

func (UnimplementedAuthedAppApiServiceHandler) AddGarageId(context.Context, *connect.Request[v1.AddGarageIdRequest]) (*connect.Response[v1.AddGarageIdResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("app_api_service.v1.AuthedAppApiService.AddGarageId is not implemented"))
}
