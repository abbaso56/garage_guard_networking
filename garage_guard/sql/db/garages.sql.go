// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: garages.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGarage = `-- name: CreateGarage :one
INSERT INTO garages(id,garage_name,device_id, gesture_seq, created_at,updated_at,video_url)
VALUES ($1 ,$2, $3, $4, $5,$6,$7)
RETURNING id, garage_name, device_id, gesture_seq, created_at, updated_at, video_url
`

type CreateGarageParams struct {
	ID         pgtype.UUID
	GarageName string
	DeviceID   pgtype.UUID
	GestureSeq pgtype.Text
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
	VideoUrl   pgtype.Text
}

func (q *Queries) CreateGarage(ctx context.Context, arg CreateGarageParams) (Garage, error) {
	row := q.db.QueryRow(ctx, createGarage,
		arg.ID,
		arg.GarageName,
		arg.DeviceID,
		arg.GestureSeq,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.VideoUrl,
	)
	var i Garage
	err := row.Scan(
		&i.ID,
		&i.GarageName,
		&i.DeviceID,
		&i.GestureSeq,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VideoUrl,
	)
	return i, err
}

const deleteGarage = `-- name: DeleteGarage :exec
DELETE FROM garages WHERE id = $1
`

func (q *Queries) DeleteGarage(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteGarage, id)
	return err
}

const getGarageByDeviceId = `-- name: GetGarageByDeviceId :one
SELECT id, garage_name, device_id, gesture_seq, created_at, updated_at, video_url FROM garages WHERE device_id = $1
`

func (q *Queries) GetGarageByDeviceId(ctx context.Context, deviceID pgtype.UUID) (Garage, error) {
	row := q.db.QueryRow(ctx, getGarageByDeviceId, deviceID)
	var i Garage
	err := row.Scan(
		&i.ID,
		&i.GarageName,
		&i.DeviceID,
		&i.GestureSeq,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VideoUrl,
	)
	return i, err
}

const getGarageById = `-- name: GetGarageById :one
SELECT id, garage_name, device_id, gesture_seq, created_at, updated_at, video_url FROM garages WHERE id = $1
`

func (q *Queries) GetGarageById(ctx context.Context, id pgtype.UUID) (Garage, error) {
	row := q.db.QueryRow(ctx, getGarageById, id)
	var i Garage
	err := row.Scan(
		&i.ID,
		&i.GarageName,
		&i.DeviceID,
		&i.GestureSeq,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VideoUrl,
	)
	return i, err
}

const updateGarageDevice = `-- name: UpdateGarageDevice :one
UPDATE garages
SET device_id = $2, updated_at = $3
WHERE id = $1
RETURNING id, garage_name, device_id, gesture_seq, created_at, updated_at, video_url
`

type UpdateGarageDeviceParams struct {
	ID        pgtype.UUID
	DeviceID  pgtype.UUID
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) UpdateGarageDevice(ctx context.Context, arg UpdateGarageDeviceParams) (Garage, error) {
	row := q.db.QueryRow(ctx, updateGarageDevice, arg.ID, arg.DeviceID, arg.UpdatedAt)
	var i Garage
	err := row.Scan(
		&i.ID,
		&i.GarageName,
		&i.DeviceID,
		&i.GestureSeq,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VideoUrl,
	)
	return i, err
}

const updateGestureSeq = `-- name: UpdateGestureSeq :one
UPDATE garages
SET gesture_seq = $2
WHERE id = $1
RETURNING id, garage_name, device_id, gesture_seq, created_at, updated_at, video_url
`

type UpdateGestureSeqParams struct {
	ID         pgtype.UUID
	GestureSeq pgtype.Text
}

func (q *Queries) UpdateGestureSeq(ctx context.Context, arg UpdateGestureSeqParams) (Garage, error) {
	row := q.db.QueryRow(ctx, updateGestureSeq, arg.ID, arg.GestureSeq)
	var i Garage
	err := row.Scan(
		&i.ID,
		&i.GarageName,
		&i.DeviceID,
		&i.GestureSeq,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.VideoUrl,
	)
	return i, err
}
