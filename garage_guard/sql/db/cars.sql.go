// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: cars.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCar = `-- name: CreateCar :one
INSERT INTO cars(id, garage_id, license_plate, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, garage_id, license_plate, created_at, updated_at
`

type CreateCarParams struct {
	ID           pgtype.UUID
	GarageID     pgtype.UUID
	LicensePlate string
	CreatedAt    pgtype.Timestamp
	UpdatedAt    pgtype.Timestamp
}

func (q *Queries) CreateCar(ctx context.Context, arg CreateCarParams) (Car, error) {
	row := q.db.QueryRow(ctx, createCar,
		arg.ID,
		arg.GarageID,
		arg.LicensePlate,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Car
	err := row.Scan(
		&i.ID,
		&i.GarageID,
		&i.LicensePlate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCar = `-- name: DeleteCar :exec
DELETE FROM cars WHERE id = $1
`

func (q *Queries) DeleteCar(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteCar, id)
	return err
}

const getCar = `-- name: GetCar :one
SELECT id, garage_id, license_plate, created_at, updated_at FROM cars WHERE id = $1
`

func (q *Queries) GetCar(ctx context.Context, id pgtype.UUID) (Car, error) {
	row := q.db.QueryRow(ctx, getCar, id)
	var i Car
	err := row.Scan(
		&i.ID,
		&i.GarageID,
		&i.LicensePlate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCarsByGarageId = `-- name: GetCarsByGarageId :many
SELECT id, garage_id, license_plate, created_at, updated_at FROM cars WHERE garage_id = $1
`

func (q *Queries) GetCarsByGarageId(ctx context.Context, garageID pgtype.UUID) ([]Car, error) {
	rows, err := q.db.Query(ctx, getCarsByGarageId, garageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Car
	for rows.Next() {
		var i Car
		if err := rows.Scan(
			&i.ID,
			&i.GarageID,
			&i.LicensePlate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
