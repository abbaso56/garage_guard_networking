// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: garages_users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGargeUserRelation = `-- name: CreateGargeUserRelation :one
INSERT INTO garages_users(garage_id, user_id, is_admin,created_at,updated_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING garage_id, user_id, is_admin, created_at, updated_at
`

type CreateGargeUserRelationParams struct {
	GarageID  pgtype.UUID
	UserID    pgtype.UUID
	IsAdmin   bool
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) CreateGargeUserRelation(ctx context.Context, arg CreateGargeUserRelationParams) (GaragesUser, error) {
	row := q.db.QueryRow(ctx, createGargeUserRelation,
		arg.GarageID,
		arg.UserID,
		arg.IsAdmin,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i GaragesUser
	err := row.Scan(
		&i.GarageID,
		&i.UserID,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGarageNamesByuserId = `-- name: GetGarageNamesByuserId :many
SELECT garages.garage_name, garages.id
FROM garages 
INNER JOIN garages_users ON garages.id = garages_users.garage_id
WHERE garages_users.user_id = $1
ORDER BY garages.garage_name
`

type GetGarageNamesByuserIdRow struct {
	GarageName string
	ID         pgtype.UUID
}

func (q *Queries) GetGarageNamesByuserId(ctx context.Context, userID pgtype.UUID) ([]GetGarageNamesByuserIdRow, error) {
	rows, err := q.db.Query(ctx, getGarageNamesByuserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGarageNamesByuserIdRow
	for rows.Next() {
		var i GetGarageNamesByuserIdRow
		if err := rows.Scan(&i.GarageName, &i.ID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGarageUserRelationByIDS = `-- name: GetGarageUserRelationByIDS :one
SeLECT garage_id, user_id, is_admin, created_at, updated_at FROM garages_users WHERE garage_id = $1 AND user_id=$2
`

type GetGarageUserRelationByIDSParams struct {
	GarageID pgtype.UUID
	UserID   pgtype.UUID
}

func (q *Queries) GetGarageUserRelationByIDS(ctx context.Context, arg GetGarageUserRelationByIDSParams) (GaragesUser, error) {
	row := q.db.QueryRow(ctx, getGarageUserRelationByIDS, arg.GarageID, arg.UserID)
	var i GaragesUser
	err := row.Scan(
		&i.GarageID,
		&i.UserID,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
